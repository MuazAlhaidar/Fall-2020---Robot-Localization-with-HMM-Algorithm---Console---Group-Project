#+TITLE: Program 2
#+AUTHOR: Muaz Alhaider and Zakariya Ahmed

* Modules
   
** Transitional Probabilty
   #+begin_center
    $$Transitional\ Probabilty(Pos_i, Dir) = (Pos_{from\ left}:Drift(Left), Pos_{from\ straight}:Drift(Straight), Pos_{from\ right}:Drift(Right)): (\text{For smoothing})$$
    
    $$Transitional\ Probabilty(Pos_i, Dir) = (Pos_{from\ left}:Drift(Left), Pos_{from\ straight}:Drift(Straight), Pos_{from\ right}:Drift(Right), Pos_{from\ behind}:Drift(Straight)): (\text{For prediction})$$
    

    /Left/, /Right/, and /Straight/ are all positions defiend in relation to what /Dir/ is: if /Dir/ is EAST, then /Left/ is SOUTH, /Right/ is NORTH, and Straight is EAST.
   #+end_center
  
   Here, transitional probabilty has two forms: one which is all paths that converge to a point, and another where they diverge from a point. Prediction (as the name implies) wants all the possiple paths to a point, which is why we include $Pos_{from\ behind}$. Smoothing however, does not require that, which is why it's not include.
   
   #+begin_src julia
  @enum SquareType OPEN CLOSED
@enum Direction WEST NORTH EAST SOUTH
@enum DriftType STRAIGHT LEFT RIGHT
const Drift=Dict(STRAIGHT=>.7, LEFT=>.15, RIGHT=>.15)
const AllDirects =(WEST, NORTH, EAST, SOUTH)
 
   # Gets the transitional probabilty of posistions going into a point,
# or transitional probablites from the point
# the first is used for prediction, the other for smoothing
function transprob( grid::Array{Array{Float64,1},1}, pos::Tuple{Int64, Int64}, dir::Direction, getforward=false) # => array of  (pos::Tuple{Int64, Int64}, Drift[Direction] * P(s), Drift[Direction])
	arr = []

	function _gen_parts(straightDir::Direction , leftDir::Direction, rightDir::Direction, behindDir::Direction, grid::Array{Array{Float64,1},1}, pos::Tuple{Int64,Int64} )
		parent_pos = []
		behind = move(pos, behindDir)
		straight = move(pos, straightDir)
		left = move(pos, leftDir)
		right = move(pos, rightDir)


		if( !notblocked(grid, straight)) # Bounce
			push!(parent_pos, (pos,Drift[STRAIGHT]*grid[pos[1]][pos[2]], Drift[STRAIGHT] ))
		elseif (getforward) # If this is smoothing, want the probabilty in front
			push!(parent_pos, (straight,Drift[STRAIGHT]*grid[straight[1]][straight[2]], Drift[STRAIGHT] ))
		end
		if( notblocked(grid, behind) && !getforward) # Prob of square behind current ot move to current
			push!(parent_pos, (behind,Drift[STRAIGHT]*grid[behind[1]][behind[2]], Drift[STRAIGHT]))
		end
		if(notblocked(grid, left)) # Get probabitly of the left pos coming to curretn
			push!(parent_pos, (left,Drift[LEFT]*grid[left[1]][left[2]], Drift[LEFT] ))
		else #Boucne from left
			push!(parent_pos, (pos,Drift[LEFT]*grid[pos[1]][pos[2]], Drift[LEFT] ))
		end
		if(notblocked(grid, right)) #Get probabilty of right pos coming to current
			push!(parent_pos, (right,Drift[RIGHT]*grid[right[1]][right[2]],Drift[RIGHT]))
		else #Bounce
			push!(parent_pos, (pos,Drift[RIGHT]*grid[pos[1]][pos[2]], Drift[RIGHT]))
		end
	end

	if(dir==WEST)
		arr=_gen_parts(WEST, SOUTH, NORTH, EAST, grid, pos)
	end
	if(dir==NORTH)
		arr=_gen_parts(NORTH, EAST, WEST, SOUTH, grid, pos)
	end
	if(dir==SOUTH)
		arr=_gen_parts(SOUTH, EAST, WEST, NORTH, grid, pos)
	end
	if(dir==EAST)
		arr=_gen_parts(EAST, SOUTH, NORTH, WEST, grid, pos)
	end
	arr
end

   #+end_src
   
** Prediction
    $$Prediction(Grid, Direction) = \left\{pos_i \in Grid | \sum^{Transiton\ Probability(pos_i, direction)}_{(Pos_j, DriftProb)} DriftProb \cdot P(Pos_j) \right \}$$
    
    $Prediction(Grid, Direction)$ (as the name implies) attempts to predict where the agent will be given previous infroamtion. It does this by transforming the grid by the equation  $\sum^{Transiton\ Probability(pos_i, direction)}_{(Pos_j, DriftProb)} DriftProb \cdot P(Pos_j)$.This gets the probabilty of an agent drifting (or if direction is straight, accurantly going to) a point, and what is the probabtily the agent would be at the point $Pos_j$.
    
    #+begin_src julia
    # Prediction is the sum of possiple transitional probabilties
# that can reach pos_i, * P(pos).j
function predict(grid::Array{Array{Float64,1}}, dir::Direction)
	tmp_grid = deepcopy(grid)
	for row in 1:6
		for col in 1:5
			if(notblocked(grid, (row,col)))
				val=sum([x[2] for x in transprob(grid, (row, col), dir)])
				tmp_grid[row][col]=val
			end
		end
	end
	tmp_grid

end

    #+end_src
    
** Evidence Contional Probabilty
   #+begin_center
  $Evidence\ Contional\ Probability(Pos_i, Evidence) =  \prod^{\text{Directions} }_{dir=W} Sense(evidence[pos_i dir], actual[pos_i+dir])$
   #+end_center
   
This is the equation we use to get the evidence contional probability: it's the product of each the evidecne's value at a direction times what's actaully in the value of the direction. So if /Left/ has open, but evidecne says it's closed, it's 0.2. Taking the prodcut of all direction's sensed value and actual value, it will result in the Evidecne Contional Probabilty at $Pos_i$ given $Evidence$

   #+begin_src julia
  # Given posistion and evidecne return probabilty of being in that posistion
const Sense=Dict(OPEN=>Dict(OPEN=>.8, CLOSED=>.2), CLOSED=>Dict(OPEN=>.25, CLOSED=>.75))
 
function evidence_Probabilty(grid::Array{Array{Float64,1},1}, pos::Tuple{Int64, Int64}, evidence::Tuple{SquareType, SquareType, SquareType, SquareType})
	prod = 1
	for i in 1:4
		tmp_pos = move(pos,AllDirects[i])
		block = notblocked(grid, tmp_pos)
		if (block)
			prod*= Sense[OPEN][evidence[i]]
		else
			prod*= Sense[CLOSED][evidence[i]]
		end
	end
	prod 
end
   #+end_src
** Filtering
   #+begin_center

 $pos_{s+1,i} = \frac{Evidecne\ Conditional\ Probabtily(pos_{s,i}, evidecne) \cdot P(pos_{s,i}) }{\sum^{all\ posistions}_{pos} Evidecne\ Conditional\ Probabtily(pos_{s,i}, evidecne) \cdot P(pos_{s,i})}$
 
$Filtering(Grid, Evidence) = \left\{pos_i \in Grid | \frac{P(pos_i) \cdot Evidence\ Conditional\ Probability(pos_i, Evidecne) }{\sum^{all\ posistions}_{pos} P(pos_i) \cdot Evidecne\ Conditional\ Probabtily(pos_i, evidecne) } \right\}$
   #+end_center
   
   Filtering is a transformation upon the grid: each value gets transformed by the expression $\frac{P(pos_i) \cdot Evidence\ Conditional\ Probability(pos_i, Evidecne) }{\sum^{all\ posistions}_{pos} P(pos_i) \cdot Evidecne\ Conditional\ Probabtily(pos_i, evidecne) }$, whcih for purposes of making it easier to talk about, will be expressed as $Filter\ Step(pos_i, Evidence)$. $Filter\ Step$ is condtional probabilty of each point times what the point was previously, and then dividng it  by the sum of all points on the grid. This operatoin is $O(n)$, although more accuratly it's $O(2n)$ because there's a minimal of iterating through each value twice.
   
   #+begin_src julia
   # Get the evidecne contional probabilty of each posistoin*Pos(s_i)
# Then divide each posistion with the evidnece conditonal probabilty
function filter(grid::Array{Array{Float64,1},1}, evidence::Tuple{SquareType, SquareType, SquareType, SquareType})
	tmp_grid = deepcopy(grid)
	for row in 1:6
		for col in 1:5
			if(notblocked(grid, (row,col)))
				tmp_grid[row][col]*=evidence_Probabilty(grid, (row, col), evidence)
			end
		end
	end
	total_sum = sum(sum(tmp_grid))
	# println("SUM: ", total_sum)
	tmp_grid / total_sum
end
   #+end_src
** Smoothing
    
    
 \begin{math}
SmoothingPart(Grid,Previous,Direction,Evidence)= \\ \\
\{pos_{i} \in Grid|P(Pos_{i} )\cdot \sum ^{Transiton\ Probability(pos_{i} ,direction)}_{(Pos_{j} ,DriftProb)}\\ \\
P(Pos_{j} )\cdot DriftProb\cdot Evidence\ Conditional\ Probabtily(Grid,Pos_{j} ,Evidence)\}\\ \\
\end{math}



    \begin{math}
    Smoothing(Grid, Previous, Direction,Evidence) = \\
  \left\{pos_i \in Grid | \frac{SmoothPart(Grid, Previous,Direction, Evidence)}{\sum^{\text{All Positons}}_{pos} Smoothpart(Grid, Prevoius, Direction,Evidence)}  \right \}
\end{math}

   

Smoothing invovles
   
   #+begin_src julia
   # Get the transitional probabilty of a point going OUT, not in
# an it's conditional probabilty, with it's inital probabilty
# returns 2 things: B at pos, and B*p(s)
function smoothpart( last_grid::Array{Array{Float64,1}}, Bgrid::Array{Array{Float64,1}},  evidence::Tuple{SquareType, SquareType, SquareType, SquareType},  dir::Direction, pos::Tuple{Int64, Int64})
	parent_pos=transprob(grid, pos, dir, true )
	x=0
	# for i in parent_pos
	for (tmp_pos, prob, drift) in parent_pos
		# tmp_pos = i[1]
		# prob = i[2]
		# drift = i[3]
		y=evidence_Probabilty(grid, tmp_pos, evidence)* Bgrid[tmp_pos[1]][tmp_pos[2]]* drift
		x+=y
	end
	
	(x,   x *last_grid[pos[1]][pos[2]])
end

# Get the smoothing part for each posistion in grid
# Then divide the whoel grid by the sum of it's parts
function smooth( grid::Array{Array{Float64,1}}, last_grid::Array{Array{Float64,1}}, Bgrid::Array{Array{Float64,1}},  evidence::Tuple{SquareType, SquareType, SquareType, SquareType},  dir::Direction)
	SP = deepcopy(grid)
	B = deepcopy(Bgrid)
	for row in 1:6
		for col in 1:5
			if(notblocked(grid, (row,col)))
				val=smoothpart(last_grid, Bgrid, evidence, dir, (row,col))
				B[row][col] = val[1]
				SP[row][col] = val[2]
			else
				B[row][col]  = 0
				SP[row][col] = 0
			end
		end
	end
	# println("SUM: ", sum(sum(SP)))
	SP/=sum(sum(SP))
	# print_grid(SP); println(); print_grid(B); println()
	(SP, B)
end

   #+end_src
* Results   
  The code outputs the following:
  #+begin_src sh :results output
  julia SUBMIT.jl
  #+end_src

  #+RESULTS:
  #+begin_example
  Initial Location Probabilities
  4.17	4.17	4.17	4.17	4.17	
  4.17	####	####	4.17	4.17	
  4.17	####	4.17	4.17	4.17	
  4.17	####	####	4.17	4.17	
  4.17	####	4.17	4.17	4.17	
  4.17	4.17	4.17	4.17	4.17	

  Filtering after Evidence [0, 0, 0, 0]
  1.62	1.62	1.62	5.2	1.62	
  1.62	####	####	5.2	5.2	
  1.62	####	0.51	16.63	5.2	
  1.62	####	####	5.2	5.2	
  1.62	####	1.62	16.63	5.2	
  1.62	1.62	5.2	5.2	1.62	

  Prediction after Action W
  2.76	1.62	4.12	2.7	1.02	
  1.62	####	####	10.55	1.02	
  1.62	####	12.15	5.2	1.56	
  1.62	####	####	12.26	1.56	
  1.62	####	13.8	5.2	1.02	
  2.76	4.12	4.66	4.41	1.02	

  Filtering after Evidence [1, 1, 0, 1]
  3.23	1.9	4.82	0.84	0.1	
  0.16	####	####	3.29	0.03	
  0.16	####	53.26	0.43	0.04	
  0.16	####	####	3.82	0.04	
  0.16	####	16.13	0.43	0.03	
  3.23	4.82	1.45	1.38	0.1	

  Prediction after Action N
  3.14	2.54	3.79	3.63	0.23	
  0.16	####	####	0.8	0.53	
  0.16	####	45.33	10.67	0.1	
  0.16	####	####	0.88	0.6	
  2.31	####	14.8	3.39	0.14	
  1.21	4.08	0.93	0.23	0.22	

  Filtering after Evidence [1, 1, 0, 1]
  1.55	1.25	1.87	0.48	0.01	
  0.01	####	####	0.11	0.01	
  0.01	####	83.92	0.37	0.0	
  0.01	####	####	0.12	0.01	
  0.09	####	7.3	0.12	0.0	
  0.6	2.01	0.12	0.03	0.01	

  Last position Smoothing with Evidence [1, 1, 0, 1] and north
  1.59	0.94	2.12	0.14	0.01	
  0.06	####	####	0.37	0.0	
  0.01	####	84.08	0.16	0.0	
  0.01	####	####	0.18	0.0	
  0.01	####	6.85	0.07	0.0	
  0.57	2.12	0.64	0.07	0.0	

  Second Last posistion smoothing with Evidence [1, 1, 0, 1] And west
  0.81	0.94	0.91	1.94	0.06	
  0.18	####	####	0.19	0.13	
  0.01	####	3.51	80.69	0.11	
  0.01	####	####	0.09	0.05	
  0.06	####	0.72	5.86	0.05	
  0.29	0.49	2.36	0.52	0.02	
  #+end_example

* Screenshots
  :PROPERTIES:
  :ID:       a93abd3f-f652-4b14-a3ef-d46d087ebe0c
  :END:
[[file:data/a9/3abd3f-f652-4b14-a3ef-d46d087ebe0c/screenshot-20201111-135323.png]]
[[file:data/a9/3abd3f-f652-4b14-a3ef-d46d087ebe0c/screenshot-20201111-135329.png]]


